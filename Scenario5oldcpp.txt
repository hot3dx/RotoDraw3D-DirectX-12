 bool isGood = false;
    const wchar_t* data = IDC_ROTATION_EDIT->Text->Data();
    for (unsigned long long i = 0; i < sizeof(data); i++)
    {
        if (data[i] == '.' ||
            data[i] == '-' ||
            data[i] == '+' ||
            data[i] == '0' ||
            data[i] == '1' ||
            data[i] == '2' ||
            data[i] == '3' ||
            data[i] == '4' ||
            data[i] == '5' ||
            data[i] == '6' ||
            data[i] == '7' ||
            data[i] == '8' ||
            data[i] == '9')
            isGood = true;
    }
    if (isGood)
    {
        Platform::String^ str = ref new Platform::String(IDC_ROTATION_EDIT->Text->Data());
        _rootPage->SetPointDrawGroupAngleDXP(std::wcstof(str->Data(), nullptr));
    }

///////////////////////////////////////////////////////////////////
#include "pch.h"
#include "Scenario5_MatsTexs.xaml.h"

using namespace Hot3dxRotoDraw;

using namespace Platform;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;
using namespace Windows::Graphics::Display;
using namespace Windows::System;
using namespace Windows::System::Threading;
using namespace Windows::UI::Core;
using namespace Windows::UI::Input;
using namespace Windows::UI::ViewManagement;
using namespace Windows::UI::Xaml;
using namespace Windows::UI::Xaml::Controls;
using namespace Windows::UI::Xaml::Controls::Primitives;
using namespace Windows::UI::Xaml::Data;
using namespace Windows::UI::Xaml::Input;
using namespace Windows::UI::Xaml::Media;
using namespace Windows::UI::Xaml::Navigation;
using namespace Windows::UI::Xaml::Interop;
using namespace Windows::UI::Xaml::Media::Imaging;
using namespace Windows::Storage;
using namespace Windows::Storage::FileProperties;
using namespace Windows::Storage::Pickers;
using namespace Windows::Storage::Provider;
using namespace concurrency;

String^ Errors::NoExifThumbnail = "No result (no EXIF thumbnail or cached thumbnail available for fast retrieval)";
String^ Errors::NoThumbnail = "No result (no thumbnail could be obtained from the selected file)";
String^ Errors::NoAlbumArt = "No result (no album art available for this song)";
String^ Errors::NoIcon = "No result (no icon available for this document type)";
String^ Errors::NoImages = "No result (no thumbnail could be obtained from the selected folder - make sure that the folder contains images)";
String^ Errors::FileGroupEmpty = "No result (unexpected error: retrieved file group was null)";
String^ Errors::FileGroupLocation = "File groups are only available for library locations, please select a folder from one of your libraries";
String^ Errors::Cancel = "No result (operation cancelled, no item selected)";
String^ Errors::InvalidSize = "Invalid size (specified size must be numerical and greater than zero)";


Hot3dxRotoDraw::Scenario5_MatsTexs::Scenario5_MatsTexs() : _rootPage(DirectXPage::Current)
{
    InitializeComponent();
	if (_rootPage->GetBitmapImageDXP1())
	{
		ThumbnailMode thumbnailMode = ThumbnailMode::SingleItem;
		String^ thumbnailModeName = thumbnailMode.ToString();
		bool fastThumbnail = false;
		ThumbnailOptions thumbnailOptions;

		const unsigned int size = int(TextureImage1->ActualHeight);
		if (size > 0)
		{
			bool fastThumbnail = false;
			thumbnailOptions = ThumbnailOptions::UseCurrentScale;
		}
		
		StorageFile^ file = _rootPage->GetFile1();
		if (file)
		{
			create_task(file->GetScaledImageAsThumbnailAsync(thumbnailMode, size, thumbnailOptions)).then([this, file, thumbnailMode, thumbnailModeName, thumbnailOptions, fastThumbnail, size](StorageItemThumbnail^ thumbnail)
			{
				if (thumbnail != nullptr)
				{
					DisplayResult(this->TextureImage1, this->textBlock1, thumbnailModeName, size, file, thumbnail, false);
					this->_rootPage->NotifyUser("Opened file" + file + file->Name, NotifyType::StatusMessage);
                }
                else
				{
					this->_rootPage->NotifyUser("Error opening file" + file->Name, NotifyType::ErrorMessage);
                }
             });
		}else{
			     this->_rootPage->NotifyUser("Error opening file" + file->Name, NotifyType::ErrorMessage);
		     }
	}
	if (_rootPage->GetBitmapImageDXP2())
	{
		ThumbnailMode thumbnailMode = ThumbnailMode::SingleItem;
		String^ thumbnailModeName = thumbnailMode.ToString();
		bool fastThumbnail = false;
		ThumbnailOptions thumbnailOptions;

		const unsigned int size = int(TextureImage2->ActualHeight);
		if (size > 0)
		{
			bool fastThumbnail = false;
			thumbnailOptions = ThumbnailOptions::UseCurrentScale;
		}

		StorageFile^ file = _rootPage->GetFile2();
		if (file)
		{
			create_task(file->GetScaledImageAsThumbnailAsync(thumbnailMode, size, thumbnailOptions)).then([this, file, thumbnailMode, thumbnailModeName, thumbnailOptions, fastThumbnail, size](StorageItemThumbnail^ thumbnail)
			{
				if (thumbnail != nullptr)
				{
					DisplayResult(this->TextureImage2, this->textBlock1, thumbnailModeName, size, file, thumbnail, false);
					this->_rootPage->NotifyUser("Opened file" + file + file->Name, NotifyType::StatusMessage);
				}
				else
				{
					this->_rootPage->NotifyUser("Error opening file" + file->Name, NotifyType::ErrorMessage);
				}
			});
		}
		else {
			this->_rootPage->NotifyUser("Error opening file" + file->Name, NotifyType::ErrorMessage);
		}
	}
	_rootPage->NotifyUser("Stopped", NotifyType::StatusMessage);
}

Hot3dxRotoDraw::Scenario5_MatsTexs::~Scenario5_MatsTexs()
{

}

void Hot3dxRotoDraw::Scenario5_MatsTexs::DisplayResult(Image^ image, TextBlock^ textBlock, String^ thumbnailModeName, size_t size, IStorageItem^ item, StorageItemThumbnail^ thumbnail, bool isGroup)
{
	BitmapImage^ bitmapImage = ref new BitmapImage();

	bitmapImage->SetSource(thumbnail);
	image->Source = bitmapImage;

	String^ itemType = isGroup ? "Group" : item->IsOfType(StorageItemTypes::File) ? "File" : "Folder";
	textBlock->Text = "ThumbnailMode." + thumbnailModeName + "\n"
		+ itemType + " used: " + item->Name + "\n"
		+ "Requested size: " + size.ToString() + "\n"
		+ "Returned size: " + thumbnail->OriginalWidth.ToString() + "x" + thumbnail->OriginalHeight.ToString();
}


void Hot3dxRotoDraw::Scenario5_MatsTexs::scrollBar_Scroll(Platform::Object^ sender, Windows::UI::Xaml::Controls::Primitives::ScrollEventArgs^ e)
{

}


void Hot3dxRotoDraw::Scenario5_MatsTexs::IDC_TEXTURE_IMAGE1_BUTTON_Click(Platform::Object^ sender, Windows::UI::Xaml::RoutedEventArgs^ e)
{
	FileOpenPicker^ openPicker = ref new FileOpenPicker();
	openPicker->ViewMode = PickerViewMode::Thumbnail;
	openPicker->SuggestedStartLocation = PickerLocationId::PicturesLibrary;
	openPicker->FileTypeFilter->Append(".jpg");
	openPicker->FileTypeFilter->Append(".jpeg");
	openPicker->FileTypeFilter->Append(".png");
	openPicker->FileTypeFilter->Append(".dds");
	openPicker->FileTypeFilter->Append(".bmp");
	openPicker->FileTypeFilter->Append(".tga");

	ThumbnailMode thumbnailMode = ThumbnailMode::SingleItem;
	String^ thumbnailModeName = thumbnailMode.ToString();
	bool fastThumbnail = false;
	ThumbnailOptions thumbnailOptions;

	const unsigned int size = int(TextureImage1->ActualHeight);
	if (size > 0)
	{
		bool fastThumbnail = false;
		ThumbnailOptions thumbnailOptions = ThumbnailOptions::UseCurrentScale;
	}

	create_task(openPicker->PickSingleFileAsync()).then([this, thumbnailMode, thumbnailModeName, thumbnailOptions, fastThumbnail, size](StorageFile^ file)
	{
		if (file)
		{
			_rootPage->SetFile1(file);
			Hot3dxRotoDraw::Scenario5_MatsTexs^ _this = this;
			create_task(file->GetScaledImageAsThumbnailAsync(thumbnailMode, size, thumbnailOptions)).then([_this, file, thumbnailMode, thumbnailModeName, thumbnailOptions, fastThumbnail, size](StorageItemThumbnail^ thumbnail)
			{
				if (thumbnail != nullptr)
				{
					_this->_rootPage->SetTextureImage1File(file->Name);
					_this->_rootPage->SetThumbnailDXP1(thumbnail);

					DisplayResult(_this->TextureImage1, _this->textBlock1, thumbnailModeName, size, file, thumbnail, false);
					_this->_rootPage->SetbitmapImageDXP1(_this->_rootPage->GetThumbnailDXP1());
					_this->_rootPage->GetBitmapImageDXP1()->SetSource(_this->_rootPage->GetThumbnailDXP1());
					
					_this->_rootPage->NotifyUser("Opened file" + file + file->Name, NotifyType::StatusMessage);
					
				}

				else
				{
					_this->_rootPage->NotifyUser("Error opening file" + file->Name, NotifyType::ErrorMessage);
					
				}
		
			});
		}
		else {}
	});
}


void Hot3dxRotoDraw::Scenario5_MatsTexs::IDC_TEXTURE_IMAGE2_BUTTON_Click(Platform::Object^ sender, Windows::UI::Xaml::RoutedEventArgs^ e)
{
	FileOpenPicker^ openPicker = ref new FileOpenPicker();
	openPicker->ViewMode = PickerViewMode::Thumbnail;
	openPicker->SuggestedStartLocation = PickerLocationId::PicturesLibrary;
	openPicker->FileTypeFilter->Append(".jpg");
	openPicker->FileTypeFilter->Append(".jpeg");
	openPicker->FileTypeFilter->Append(".png");
	openPicker->FileTypeFilter->Append(".dds");
	openPicker->FileTypeFilter->Append(".bmp");
	openPicker->FileTypeFilter->Append(".tga");

	ThumbnailMode thumbnailMode = ThumbnailMode::SingleItem;
	String^ thumbnailModeName = thumbnailMode.ToString();
	bool fastThumbnail = false;
	ThumbnailOptions thumbnailOptions;

	const unsigned int size = int(TextureImage2->ActualHeight);
	if (size > 0)
	{
		bool fastThumbnail = false;
		ThumbnailOptions thumbnailOptions = ThumbnailOptions::UseCurrentScale;
	}

	create_task(openPicker->PickSingleFileAsync()).then([this, thumbnailMode, thumbnailModeName, thumbnailOptions, fastThumbnail, size](StorageFile^ file)
	{
		if (file)
		{
			_rootPage->SetFile2(file);
			Hot3dxRotoDraw::Scenario5_MatsTexs^ _this = this;
			create_task(file->GetScaledImageAsThumbnailAsync(thumbnailMode, size, thumbnailOptions)).then([_this, file, thumbnailMode, thumbnailModeName, thumbnailOptions, fastThumbnail, size](StorageItemThumbnail^ thumbnail)
			{
				if (thumbnail != nullptr)
				{
					_this->_rootPage->SetTextureImage2File(file->Name);
					_this->_rootPage->SetThumbnailDXP2(thumbnail);
					DisplayResult(_this->TextureImage2, _this->textBlock1, thumbnailModeName, size, file, thumbnail, false);
					_this->_rootPage->SetbitmapImageDXP2(_this->_rootPage->GetThumbnailDXP2());
					_this->_rootPage->GetBitmapImageDXP2()->SetSource(_this->_rootPage->GetThumbnailDXP2());
					_this->_rootPage->NotifyUser("Opened file" + file + file->Name, NotifyType::StatusMessage);
					
				}

				else
				{
					_this->_rootPage->NotifyUser("Error opening file" + file + file->Name, NotifyType::ErrorMessage);
				}

			});
		}
		else {}
	}); 
	
	_rootPage->TEXTURE_IMAGE2(sender, e);
}
