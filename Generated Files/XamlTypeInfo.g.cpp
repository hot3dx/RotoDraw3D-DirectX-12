//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "App.xaml.h"
#include "DirectXPage.xaml.h"
#include "Scenario10_Sculpt.xaml.h"
#include "Scenario1_Start.xaml.h"
#include "Scenario2_Normal.xaml.h"
#include "Scenario3_FileIO.xaml.h"
#include "Scenario4_MySettings.xaml.h"
#include "Scenario5_MatsTexs.xaml.h"
#include "Scenario6_ColorPicker.xaml.h"
#include "Scenario7_SphereDraw.xaml.h"
#include "Scenario8_Help.xaml.h"
#include "Scenario9_Rotate.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "App.g.hpp"
#include "DirectXPage.g.hpp"
#include "Scenario10_Sculpt.g.hpp"
#include "Scenario1_Start.g.hpp"
#include "Scenario2_Normal.g.hpp"
#include "Scenario3_FileIO.g.hpp"
#include "Scenario4_MySettings.g.hpp"
#include "Scenario5_MatsTexs.g.hpp"
#include "Scenario6_ColorPicker.g.hpp"
#include "Scenario7_SphereDraw.g.hpp"
#include "Scenario8_Help.g.hpp"
#include "Scenario9_Rotate.g.hpp"

template<typename T>
::Platform::Object^ ActivateType()
{
    return ref new T;
}

template<typename TInstance, typename TItem>
void CollectionAdd(::Platform::Object^ instance, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Append((TItem)item);
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Insert((TKey)key, (TItem)item);
}

template<typename T>
::Platform::Object^ FromStringConverter(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)
{
    return ref new ::Platform::Box<T>((T)userType->CreateEnumUIntFromString(input));
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_IsExpanded(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->IsExpanded);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_HasUnrealizedChildren(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->HasUnrealizedChildren);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Depth(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Depth);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_HasChildren(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->HasChildren);
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Content(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Content;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Children(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Children;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Parent(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Parent;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsExpanded(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->IsExpanded = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_HasUnrealizedChildren(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->HasUnrealizedChildren = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Content(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Content = safe_cast<TValue^>(value);
}

enum TypeInfo_Flags
{
    TypeInfo_Flags_None                 = 0x00,
    TypeInfo_Flags_IsLocalType          = 0x01,
    TypeInfo_Flags_IsSystemType         = 0x02,
    TypeInfo_Flags_IsReturnTypeStub     = 0x04,
    TypeInfo_Flags_IsBindable           = 0x08,
    TypeInfo_Flags_IsMarkupExtension    = 0x10, 
};

struct TypeInfo
{
    PCWSTR  typeName;
    PCWSTR contentPropertyName;
    ::Platform::Object^ (*activator)();
    void (*collectionAdd)(::Platform::Object^, ::Platform::Object^);
    void (*dictionaryAdd)(::Platform::Object^, ::Platform::Object^, ::Platform::Object^);
    ::Platform::Object^ (*fromStringConverter)(::XamlTypeInfo::InfoProvider::XamlUserType^, ::Platform::String^);
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    int     createFromStringIndex;
    ::Windows::UI::Xaml::Interop::TypeKind kindofType;
    unsigned int flags;
    int boxedTypeIndex;
};

const TypeInfo TypeInfos[] = 
{
    //   0
    L"Int32", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   1
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   2
    L"Boolean", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   3
    L"Hot3dxRotoDraw.DirectXPage", L"",
    &ActivateType<::Hot3dxRotoDraw::DirectXPage>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //   4
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   5
    L"Hot3dxRotoDraw.Scenario8_Help", L"",
    &ActivateType<::Hot3dxRotoDraw::Scenario8_Help>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //   6
    L"Hot3dxRotoDraw.Scenario1_Start", L"",
    &ActivateType<::Hot3dxRotoDraw::Scenario1_Start>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //   7
    L"Hot3dxRotoDraw.Scenario2_Normal", L"",
    &ActivateType<::Hot3dxRotoDraw::Scenario2_Normal>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //   8
    L"Hot3dxRotoDraw.Scenario3_FileIO", L"",
    &ActivateType<::Hot3dxRotoDraw::Scenario3_FileIO>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //   9
    L"Hot3dxRotoDraw.Scenario9_Rotate", L"",
    &ActivateType<::Hot3dxRotoDraw::Scenario9_Rotate>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  10
    L"Hot3dxRotoDraw.Scenario10_Sculpt", L"",
    &ActivateType<::Hot3dxRotoDraw::Scenario10_Sculpt>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  11
    L"Windows.UI.Xaml.DependencyObject", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  12
    L"Hot3dxRotoDraw.Scenario5_MatsTexs", L"",
    &ActivateType<::Hot3dxRotoDraw::Scenario5_MatsTexs>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  13
    L"Windows.UI.Xaml.ResourceDictionary", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  14
    L"Hot3dxRotoDraw.Scenario4_MySettings", L"",
    &ActivateType<::Hot3dxRotoDraw::Scenario4_MySettings>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  15
    L"Hot3dxRotoDraw.Scenario7_SphereDraw", L"",
    &ActivateType<::Hot3dxRotoDraw::Scenario7_SphereDraw>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  16
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  17
    L"Hot3dxRotoDraw.Scenario6_ColorPicker", L"",
    &ActivateType<::Hot3dxRotoDraw::Scenario6_ColorPicker>, nullptr, nullptr, nullptr,
    4, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  18
    L"Microsoft.UI.Xaml.Controls.TreeViewNode", L"",
    &ActivateType<::Microsoft::UI::Xaml::Controls::TreeViewNode>, nullptr, nullptr, nullptr,
    11, // Windows.UI.Xaml.DependencyObject
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    -1,
    //  19
    L"Microsoft.UI.Xaml.Controls.XamlControlsResources", L"",
    &ActivateType<::Microsoft::UI::Xaml::Controls::XamlControlsResources>, nullptr, &DictionaryAdd<::Microsoft::UI::Xaml::Controls::XamlControlsResources, ::Platform::Object^, ::Platform::Object^>, nullptr,
    13, // Windows.UI.Xaml.ResourceDictionary
    7, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  20
    L"Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.Controls.TreeViewNode>", L"",
    nullptr, &CollectionAdd<::Windows::Foundation::Collections::IVector<::Microsoft::UI::Xaml::Controls::TreeViewNode^>, ::Microsoft::UI::Xaml::Controls::TreeViewNode^>, nullptr, nullptr,
    -1,
    7, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    -1,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    7, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_None,
};

const UINT TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      1,   //   6
      2,   //   7
      3,   //   8
      3,   //   9
      3,   //  10
      3,   //  11
      3,   //  12
      3,   //  13
      3,   //  14
      3,   //  15
      3,   //  16
      3,   //  17
      3,   //  18
      3,   //  19
      3,   //  20
      3,   //  21
      3,   //  22
      3,   //  23
      3,   //  24
      3,   //  25
      3,   //  26
      4,   //  27
      4,   //  28
      4,   //  29
      6,   //  30
      7,   //  31
     10,   //  32
     12,   //  33
     13,   //  34
     14,   //  35
     16,   //  36
     18,   //  37
     18,   //  38
     18,   //  39
     19,   //  40
     19,   //  41
     19,   //  42
     19,   //  43
     19,   //  44
     19,   //  45
     19,   //  46
     19,   //  47
     19,   //  48
     20,   //  49
     20,   //  50
     20,   //  51
     20,   //  52
     20,   //  53
     20,   //  54
     20,   //  55
     20,   //  56
     20,   //  57
     20,   //  58
     20,   //  59
     20,   //  60
     20,   //  61
     20,   //  62
     20,   //  63
     20,   //  64
     20,   //  65
     20,   //  66
     20,   //  67
     20,   //  68
     20,   //  69
     20,   //  70
     20,   //  71
     20,   //  72
     20,   //  73
     20,   //  74
     20,   //  75
     20,   //  76
     20,   //  77
     20,   //  78
     20,   //  79
     20,   //  80
     20,   //  81
     21,   //  82
};

const TypeInfo* GetTypeInfo(::Platform::String^ typeName)
{
    auto typeNameLength = typeName->Length();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        for (UINT i = TypeInfoLookup[typeNameLength]; i < TypeInfoLookup[typeNameLength+1]; i++)
        {
            if (typeName == ::Platform::StringReference(TypeInfos[i].typeName))
            {
                return &TypeInfos[i];
            }
        }
    }
    return nullptr;
}

struct MemberInfo 
{
    PCWSTR shortName;
    ::Platform::Object^ (*getter)(::Platform::Object^);
    void (*setter)(::Platform::Object^, ::Platform::Object^);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

const MemberInfo MemberInfos[] = 
{
    //   0 - Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded
    L"IsExpanded",
    &GetValueTypeMember_IsExpanded<::Microsoft::UI::Xaml::Controls::TreeViewNode, ::Platform::Boolean>,
    &SetValueTypeMember_IsExpanded<::Microsoft::UI::Xaml::Controls::TreeViewNode, ::Platform::Boolean>,
    2, // Boolean
    -1,
    false, true,  false,
    //   1 - Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren
    L"HasUnrealizedChildren",
    &GetValueTypeMember_HasUnrealizedChildren<::Microsoft::UI::Xaml::Controls::TreeViewNode, ::Platform::Boolean>,
    &SetValueTypeMember_HasUnrealizedChildren<::Microsoft::UI::Xaml::Controls::TreeViewNode, ::Platform::Boolean>,
    2, // Boolean
    -1,
    false, false, false,
    //   2 - Microsoft.UI.Xaml.Controls.TreeViewNode.Content
    L"Content",
    &GetReferenceTypeMember_Content<::Microsoft::UI::Xaml::Controls::TreeViewNode>,
    &SetReferenceTypeMember_Content<::Microsoft::UI::Xaml::Controls::TreeViewNode, ::Platform::Object>,
    1, // Object
    -1,
    false, true,  false,
    //   3 - Microsoft.UI.Xaml.Controls.TreeViewNode.Children
    L"Children",
    &GetReferenceTypeMember_Children<::Microsoft::UI::Xaml::Controls::TreeViewNode>,
    nullptr,
    20, // Windows.Foundation.Collections.IVector`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
    -1,
    true,  false, false,
    //   4 - Microsoft.UI.Xaml.Controls.TreeViewNode.Depth
    L"Depth",
    &GetValueTypeMember_Depth<::Microsoft::UI::Xaml::Controls::TreeViewNode, ::default::int32>,
    nullptr,
    0, // Int32
    -1,
    true,  true,  false,
    //   5 - Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren
    L"HasChildren",
    &GetValueTypeMember_HasChildren<::Microsoft::UI::Xaml::Controls::TreeViewNode, ::Platform::Boolean>,
    nullptr,
    2, // Boolean
    -1,
    true,  true,  false,
    //   6 - Microsoft.UI.Xaml.Controls.TreeViewNode.Parent
    L"Parent",
    &GetReferenceTypeMember_Parent<::Microsoft::UI::Xaml::Controls::TreeViewNode>,
    nullptr,
    18, // Microsoft.UI.Xaml.Controls.TreeViewNode
    -1,
    true,  false, false,
};

PCWSTR GetShortName(PCWSTR longName)
{
    PCWSTR separator = wcsrchr(longName, '.');
    return separator != nullptr ? separator + 1: longName;
}


const MemberInfo* GetMemberInfo(::Platform::String^ longMemberName)
{
    auto lastDotIndex = longMemberName->Length();
    while (true)
    {
        if (longMemberName->Data()[lastDotIndex] == '.')
        {
            const TypeInfo* pTypeInfo = GetTypeInfo(ref new ::Platform::String(longMemberName->Data(), lastDotIndex));
            const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            if (pTypeInfo)
            {
                PCWSTR shortMemberName = GetShortName(longMemberName->Data());
                for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
                {
                    if (wcscmp(shortMemberName, MemberInfos[i].shortName) == 0)
                    {
                        return &MemberInfos[i];
                    }
                }
            }
            break;
        }
        if (lastDotIndex == 0)
        {
            break;
        }
        lastDotIndex--;
    }
    return nullptr;
}

#pragma warning(push)
#pragma warning(disable: 4691)
::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        ::Windows::UI::Xaml::Markup::IXamlMetadataProvider^ provider;
        provider = ref new ::Microsoft::UI::Xaml::XamlTypeInfo::XamlControlsXamlMetaDataProvider();
        otherProviders->Append(provider); 
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}
#pragma warning(pop)

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    const TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (pTypeInfo == nullptr || pNextTypeInfo == nullptr)
    {
        return nullptr;
    }
    else if (pTypeInfo->flags & TypeInfo_Flags_IsSystemType)
    {
        return ref new ::XamlTypeInfo::InfoProvider::XamlSystemBaseType(typeName);
    }
    else
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(
            this, 
            ::Platform::StringReference(pTypeInfo->typeName), 
            this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L"")));
        userType->KindOfType = pTypeInfo->kindofType;
        userType->Activator = pTypeInfo->activator;
        userType->CollectionAdd = pTypeInfo->collectionAdd;
        userType->DictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->FromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName = ::Platform::StringReference(pTypeInfo->contentPropertyName);
        userType->IsLocalType = pTypeInfo->flags & TypeInfo_Flags_IsLocalType;
        userType->IsReturnTypeStub = pTypeInfo->flags & TypeInfo_Flags_IsReturnTypeStub;
        userType->IsBindable = pTypeInfo->flags & TypeInfo_Flags_IsBindable;
        userType->IsMarkupExtension = pTypeInfo->flags & TypeInfo_Flags_IsMarkupExtension;
        userType->CreateFromStringMethod = nullptr;
        userType->SetBoxedType(this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->boxedTypeIndex >= 0 ? TypeInfos[pTypeInfo->boxedTypeIndex].typeName : L"")));
        int nextMemberIndex = pTypeInfo->firstMemberIndex;
        for (int i=pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
        {
            userType->AddMemberName(::Platform::StringReference(MemberInfos[i].shortName));
            nextMemberIndex++;
        }
        return userType;
    }
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = nullptr;
    const MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (pMemberInfo != nullptr)
    {
        xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(
            this,
            ::Platform::StringReference(pMemberInfo->shortName),
            ::Platform::StringReference(TypeInfos[pMemberInfo->typeIndex].typeName));
        xamlMember->Getter = pMemberInfo->getter;
        xamlMember->Setter = pMemberInfo->setter;
        xamlMember->TargetTypeName = pMemberInfo->targetTypeIndex >= 0 ? ::Platform::StringReference(TypeInfos[pMemberInfo->targetTypeIndex].typeName) : L"";
        xamlMember->IsReadOnly = pMemberInfo->isReadOnly;
        xamlMember->IsDependencyProperty = pMemberInfo->isDependencyProperty;
        xamlMember->IsAttachable = pMemberInfo->isAttachable;
    }
    return xamlMember;
}

